// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const insertOrUpdateUser = `-- name: InsertOrUpdateUser :one
INSERT INTO users (email, picture, name)
VALUES ($1, $2, $3)
ON CONFLICT (email) DO UPDATE SET picture = $2, name = $3
RETURNING id, email, picture, name, created_at, updated_at
`

type InsertOrUpdateUserParams struct {
	Email   string
	Picture sql.NullString
	Name    sql.NullString
}

func (q *Queries) InsertOrUpdateUser(ctx context.Context, arg InsertOrUpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, insertOrUpdateUser, arg.Email, arg.Picture, arg.Name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Picture,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
