// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: posts.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const getPostsByUser = `-- name: GetPostsByUser :many
SELECT posts.id, posts.title, posts.content, posts.slug, posts.created_at, posts.updated_at, posts.user_id, users.id, users.email, users.picture, users.name, users.created_at, users.updated_at FROM posts
JOIN users ON users.id = posts.user_id
WHERE users.id = $1
`

type GetPostsByUserRow struct {
	ID          uuid.UUID
	Title       string
	Content     string
	Slug        string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	UserID      uuid.UUID
	ID_2        uuid.UUID
	Email       string
	Picture     sql.NullString
	Name        sql.NullString
	CreatedAt_2 time.Time
	UpdatedAt_2 time.Time
}

func (q *Queries) GetPostsByUser(ctx context.Context, id uuid.UUID) ([]GetPostsByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUser, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsByUserRow
	for rows.Next() {
		var i GetPostsByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Slug,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.ID_2,
			&i.Email,
			&i.Picture,
			&i.Name,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertPost = `-- name: InsertPost :one
INSERT INTO posts (title, content, slug, user_id)
VALUES ($1, $2, $3, $4)
RETURNING id, title, content, slug, created_at, updated_at, user_id
`

type InsertPostParams struct {
	Title   string
	Content string
	Slug    string
	UserID  uuid.UUID
}

func (q *Queries) InsertPost(ctx context.Context, arg InsertPostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, insertPost,
		arg.Title,
		arg.Content,
		arg.Slug,
		arg.UserID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}
